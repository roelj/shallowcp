#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright Â© 2020  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License as
;;; published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(use-modules (ice-9 ftw)
             (ice-9 match))

(define %cmd-line (command-line))
(unless (> (length %cmd-line) 2)
  (for-each
   (lambda (line) (format #t "~a~%" line))
   '("Usage:"
     "  shallowcp source-dir dest-dir"))
  (exit 1))

(define source-dir (list-ref %cmd-line 1))
(define dest-dir   (list-ref %cmd-line 2))

(unless (file-exists? source-dir)
  (format (current-error-port) "~a does not exist.~%")
  (exit 1))

(define (mkdir-p dir)
  "Create directory DIR and all its ancestors."
  (define absolute?
    (string-prefix? "/" dir))

  (define not-slash
    (char-set-complement (char-set #\/)))

  (let loop ((components (string-tokenize dir not-slash))
             (root       (if absolute?
                             ""
                             ".")))
    (match components
      ((head tail ...)
       (let ((path (string-append root "/" head)))
         (catch 'system-error
           (lambda ()
             (mkdir path)
             (loop tail path))
           (lambda args
             (if (= EEXIST (system-error-errno args))
                 (loop tail path)
                 (apply throw args))))))
      (() #t))))

(define (string-replace-substring s substring replacement)
  "Replace every instance of @var{substring} in string @var{s} by @var{replacement}."
  (let ((sublen (string-length substring)))
    (with-output-to-string
      (lambda ()
        (let lp ((start 0))
          (cond
           ((string-contains s substring start)
            => (lambda (end)
                 (display (substring/shared s start end))
                 (display replacement)
                 (lp (+ end sublen))))
           (else
            (display (substring/shared s start)))))))))

(define* (light-copy-directory old-directory new-directory
                               #:optional (recursively? #t))
  (if recursively?
      (let ((files '()))
        (ftw old-directory
             (lambda (filename statinfo flag)
               (cond
                [(eq? flag 'directory)
                 (let ((new-dir (string-replace-substring filename
                                                          old-directory
                                                          new-directory)))
                   (format #t "+ ~a~%" new-dir)
                   (mkdir-p new-dir)
                   )
                 #t]
                [(eq? flag 'regular)
                 (let ((dest (string-append (string-replace-substring
                                             (dirname filename)
                                             old-directory
                                             new-directory)
                                            "/" (basename filename))))
                   (format #t "  --> ~a~%" dest)
                   (symlink filename dest)
                   )
                 #t])))
        files)
      (map (lambda (entry)
             (string-append (getcwd) "/" entry))
           (scandir old-directory (lambda (entry)
                                    (not (or (string= entry ".")
                                             (string= entry ".."))))))))

(light-copy-directory source-dir dest-dir)
